{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# GitHub Repository Manager\n\n## Overview\n\nThis is a full-stack web application that provides a comprehensive GitHub repository management interface. Built with modern React and Express.js, it allows users to browse, edit, and manage their GitHub repositories directly through a web interface. The application features a file explorer, code editor with syntax highlighting, and commit functionality, essentially providing a web-based IDE for GitHub repositories.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, professional UI components\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Code Editor**: Monaco Editor integration for syntax highlighting and code editing capabilities\n- **UI Components**: Comprehensive set of Radix UI primitives through shadcn/ui for accessibility and consistency\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript for API development\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Storage**: In-memory storage interface with extensible design for easy database integration\n- **Development**: Vite integration for hot module replacement and development server\n\n### Data Storage Solutions\n- **Database**: PostgreSQL configured through Drizzle ORM with migrations support\n- **Connection**: Neon Database serverless PostgreSQL for cloud deployment\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Local Development**: In-memory storage implementation for development and testing\n\n### Authentication and Authorization\n- **GitHub Integration**: Personal Access Token-based authentication with GitHub API\n- **Token Storage**: Client-side localStorage for token persistence\n- **API Access**: Full GitHub API integration for repository operations\n\n### External Dependencies\n\n#### Core Technologies\n- **Neon Database**: Serverless PostgreSQL hosting for production data storage\n- **GitHub API**: Complete integration for repository management, file operations, and commit handling\n- **Monaco Editor**: Microsoft's code editor for in-browser code editing with IntelliSense\n\n#### Development Tools\n- **Vite**: Build tool and development server with hot reload\n- **TypeScript**: Type safety across frontend and backend\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Fast bundling for production builds\n\n#### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Radix UI**: Headless UI primitives for accessibility\n- **shadcn/ui**: Pre-built component library built on Radix UI\n- **Lucide React**: Icon library for consistent iconography\n\n#### State and Data Management\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form handling with validation\n- **Zod**: Runtime type validation and schema parsing\n\nThe application follows a modern full-stack architecture with clear separation between frontend and backend concerns, leveraging industry-standard tools for development, deployment, and user experience.","size_bytes":3380},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        spin: {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(360deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        spin: \"spin 1s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2917},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execAsync = promisify(exec);\n\nconsole.log(\"ðŸš€ Starting Vite development server...\");\n\n// Run Vite directly\nasync function startVite() {\n  try {\n    const viteProcess = exec(\"npx vite --config vite.replit.config.ts --port 5000 --host 0.0.0.0\", (error, stdout, stderr) => {\n      if (error) {\n        console.error(`Error: ${error.message}`);\n        return;\n      }\n      if (stderr) {\n        console.error(`stderr: ${stderr}`);\n        return;\n      }\n      console.log(stdout);\n    });\n\n    // Forward output to console\n    viteProcess.stdout?.on('data', (data) => {\n      process.stdout.write(data);\n    });\n\n    viteProcess.stderr?.on('data', (data) => {\n      process.stderr.write(data);\n    });\n\n    // Handle process exit\n    viteProcess.on('exit', (code) => {\n      console.log(`Vite process exited with code ${code}`);\n      process.exit(code || 0);\n    });\n\n  } catch (error) {\n    console.error(\"Failed to start Vite:\", error);\n    process.exit(1);\n  }\n}\n\nstartVite();","size_bytes":1060},"server/routes.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"./storage\";\nimport { insertRepositorySchema, insertFileSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\nconst router = Router();\n\n// Health check endpoint\nrouter.get(\"/health\", (req, res) => {\n  res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n});\n\n// Repository routes\nrouter.get(\"/repositories\", async (req, res) => {\n  try {\n    const repositories = await storage.getRepositories();\n    res.json(repositories);\n  } catch (error) {\n    console.error(\"Error fetching repositories:\", error);\n    res.status(500).json({ error: \"Failed to fetch repositories\" });\n  }\n});\n\nrouter.post(\"/repositories\", async (req, res) => {\n  try {\n    const validationResult = insertRepositorySchema.safeParse(req.body);\n    if (!validationResult.success) {\n      const error = fromZodError(validationResult.error);\n      return res.status(400).json({ error: error.message });\n    }\n\n    const repository = await storage.createRepository(validationResult.data);\n    res.status(201).json(repository);\n  } catch (error) {\n    console.error(\"Error creating repository:\", error);\n    res.status(500).json({ error: \"Failed to create repository\" });\n  }\n});\n\nrouter.get(\"/repositories/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid repository ID\" });\n    }\n\n    const repository = await storage.getRepository(id);\n    if (!repository) {\n      return res.status(404).json({ error: \"Repository not found\" });\n    }\n\n    res.json(repository);\n  } catch (error) {\n    console.error(\"Error fetching repository:\", error);\n    res.status(500).json({ error: \"Failed to fetch repository\" });\n  }\n});\n\n// File routes\nrouter.get(\"/repositories/:repoId/files\", async (req, res) => {\n  try {\n    const repositoryId = req.params.repoId;\n    const files = await storage.getFiles(repositoryId);\n    res.json(files);\n  } catch (error) {\n    console.error(\"Error fetching files:\", error);\n    res.status(500).json({ error: \"Failed to fetch files\" });\n  }\n});\n\nrouter.post(\"/repositories/:repoId/files\", async (req, res) => {\n  try {\n    const repositoryId = req.params.repoId;\n    const fileData = { ...req.body, repositoryId };\n    \n    const validationResult = insertFileSchema.safeParse(fileData);\n    if (!validationResult.success) {\n      const error = fromZodError(validationResult.error);\n      return res.status(400).json({ error: error.message });\n    }\n\n    const file = await storage.createFile(validationResult.data);\n    res.status(201).json(file);\n  } catch (error) {\n    console.error(\"Error creating file:\", error);\n    res.status(500).json({ error: \"Failed to create file\" });\n  }\n});\n\nrouter.get(\"/files/:id\", async (req, res) => {\n  try {\n    const id = parseInt(req.params.id);\n    if (isNaN(id)) {\n      return res.status(400).json({ error: \"Invalid file ID\" });\n    }\n\n    const file = await storage.getFile(id);\n    if (!file) {\n      return res.status(404).json({ error: \"File not found\" });\n    }\n\n    res.json(file);\n  } catch (error) {\n    console.error(\"Error fetching file:\", error);\n    res.status(500).json({ error: \"Failed to fetch file\" });\n  }\n});\n\nexport function registerRoutes(app: any) {\n  app.use(\"/api\", router);\n}","size_bytes":3325},"server/storage.ts":{"content":"import { Repository, FileEntity, InsertRepository, InsertFile } from \"@shared/schema\";\n\n// Storage interface for abstracting data persistence\nexport interface IStorage {\n  // Repository operations\n  createRepository(data: InsertRepository): Promise<Repository>;\n  getRepositories(): Promise<Repository[]>;\n  getRepository(id: number): Promise<Repository | null>;\n  updateRepository(id: number, data: Partial<InsertRepository>): Promise<Repository | null>;\n  deleteRepository(id: number): Promise<boolean>;\n\n  // File operations\n  createFile(data: InsertFile): Promise<FileEntity>;\n  getFiles(repositoryId: string): Promise<FileEntity[]>;\n  getFile(id: number): Promise<FileEntity | null>;\n  getFileByPath(repositoryId: string, path: string): Promise<FileEntity | null>;\n  updateFile(id: number, data: Partial<InsertFile>): Promise<FileEntity | null>;\n  deleteFile(id: number): Promise<boolean>;\n}\n\n// In-memory storage implementation for development\nexport class MemStorage implements IStorage {\n  private repositories: Map<number, Repository> = new Map();\n  private files: Map<number, FileEntity> = new Map();\n  private repositoryIdCounter = 1;\n  private fileIdCounter = 1;\n\n  // Repository methods\n  async createRepository(data: InsertRepository): Promise<Repository> {\n    const repository: Repository = {\n      id: this.repositoryIdCounter++,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.repositories.set(repository.id, repository);\n    return repository;\n  }\n\n  async getRepositories(): Promise<Repository[]> {\n    return Array.from(this.repositories.values());\n  }\n\n  async getRepository(id: number): Promise<Repository | null> {\n    return this.repositories.get(id) || null;\n  }\n\n  async updateRepository(id: number, data: Partial<InsertRepository>): Promise<Repository | null> {\n    const existing = this.repositories.get(id);\n    if (!existing) return null;\n\n    const updated: Repository = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.repositories.set(id, updated);\n    return updated;\n  }\n\n  async deleteRepository(id: number): Promise<boolean> {\n    return this.repositories.delete(id);\n  }\n\n  // File methods\n  async createFile(data: InsertFile): Promise<FileEntity> {\n    const file: FileEntity = {\n      id: this.fileIdCounter++,\n      ...data,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.files.set(file.id, file);\n    return file;\n  }\n\n  async getFiles(repositoryId: string): Promise<FileEntity[]> {\n    return Array.from(this.files.values()).filter(\n      file => file.repositoryId === repositoryId\n    );\n  }\n\n  async getFile(id: number): Promise<FileEntity | null> {\n    return this.files.get(id) || null;\n  }\n\n  async getFileByPath(repositoryId: string, path: string): Promise<FileEntity | null> {\n    return Array.from(this.files.values()).find(\n      file => file.repositoryId === repositoryId && file.path === path\n    ) || null;\n  }\n\n  async updateFile(id: number, data: Partial<InsertFile>): Promise<FileEntity | null> {\n    const existing = this.files.get(id);\n    if (!existing) return null;\n\n    const updated: FileEntity = {\n      ...existing,\n      ...data,\n      updatedAt: new Date(),\n    };\n    this.files.set(id, updated);\n    return updated;\n  }\n\n  async deleteFile(id: number): Promise<boolean> {\n    return this.files.delete(id);\n  }\n}\n\n// Export a singleton instance for the application\nexport const storage = new MemStorage();","size_bytes":3475},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, serial, text, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Repository table for storing GitHub repository metadata\nexport const repositories = pgTable(\"repositories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  description: text(\"description\"),\n  private: text(\"private\").notNull(),\n  htmlUrl: text(\"html_url\").notNull(),\n  defaultBranch: text(\"default_branch\").notNull().default(\"main\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Files table for caching file content and metadata\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  repositoryId: text(\"repository_id\").notNull(),\n  path: text(\"path\").notNull(),\n  content: text(\"content\"),\n  sha: text(\"sha\"),\n  size: text(\"size\"),\n  type: text(\"type\").notNull(), // 'file' or 'dir'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Export insert schemas for validation\nexport const insertRepositorySchema = createInsertSchema(repositories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFileSchema = createInsertSchema(files).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Export select schemas for consistency\nexport const selectRepositorySchema = createSelectSchema(repositories);\nexport const selectFileSchema = createSelectSchema(files);\n\n// Export types for use in frontend and backend\nexport type Repository = typeof repositories.$inferSelect;\nexport type InsertRepository = z.infer<typeof insertRepositorySchema>;\nexport type FileEntity = typeof files.$inferSelect;\nexport type InsertFile = z.infer<typeof insertFileSchema>;\n\n// GitHub API response types\nexport interface GitHubRepository {\n  id: number;\n  name: string;\n  full_name: string;\n  description: string | null;\n  private: boolean;\n  html_url: string;\n  default_branch: string;\n}\n\nexport interface GitHubFileContent {\n  name: string;\n  path: string;\n  sha: string;\n  size: number;\n  url: string;\n  html_url: string;\n  git_url: string;\n  download_url: string | null;\n  type: 'file' | 'dir';\n  content?: string;\n  encoding?: string;\n}\n\nexport interface CommitFileChange {\n  path: string;\n  content: string;\n  previousSha?: string;\n}","size_bytes":2435},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport RepositoryManager from \"@/pages/repository-manager\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={RepositoryManager} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Global error handler to suppress ResizeObserver errors\n    const handleError = (event: ErrorEvent) => {\n      if (event.error?.message?.includes('ResizeObserver loop limit exceeded')) {\n        event.preventDefault();\n        return false;\n      }\n    };\n\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      if (event.reason?.message?.includes('ResizeObserver loop limit exceeded')) {\n        event.preventDefault();\n        return false;\n      }\n    };\n\n    window.addEventListener('error', handleError);\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n\n    return () => {\n      window.removeEventListener('error', handleError);\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1587},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=JetBrains+Mono:wght@300;400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 71%, 6%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 71%, 6%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(215, 28%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(215, 28%, 14%);\n  --muted-foreground: hsl(217, 11%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 85%, 97%);\n  --border: hsl(215, 28%, 17%);\n  --input: hsl(215, 28%, 17%);\n  --ring: hsl(262, 83%, 58%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(22, 27%, 34%);\n  --sidebar-foreground: hsl(240, 246%, 252%);\n  --sidebar-primary: hsl(31, 111%, 235%);\n  --sidebar-primary-foreground: hsl(255, 255%, 255%);\n  --sidebar-accent: hsl(35, 134%, 54%);\n  --sidebar-accent-foreground: hsl(255, 255%, 255%);\n  --sidebar-border: hsl(48, 54%, 61%);\n  --sidebar-ring: hsl(31, 111%, 235%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --radius: 6px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(13, 17%, 23%);\n  --foreground: hsl(240, 246%, 252%);\n  --card: hsl(22, 27%, 34%);\n  --card-foreground: hsl(240, 246%, 252%);\n  --popover: hsl(22, 27%, 34%);\n  --popover-foreground: hsl(240, 246%, 252%);\n  --primary: hsl(31, 111%, 235%);\n  --primary-foreground: hsl(255, 255%, 255%);\n  --secondary: hsl(33, 38%, 45%);\n  --secondary-foreground: hsl(240, 246%, 252%);\n  --muted: hsl(33, 38%, 45%);\n  --muted-foreground: hsl(139, 148%, 158%);\n  --accent: hsl(35, 134%, 54%);\n  --accent-foreground: hsl(255, 255%, 255%);\n  --destructive: hsl(218, 54%, 51%);\n  --destructive-foreground: hsl(255, 255%, 255%);\n  --border: hsl(48, 54%, 61%);\n  --input: hsl(33, 38%, 45%);\n  --ring: hsl(31, 111%, 235%);\n  --sidebar: hsl(22, 27%, 34%);\n  --sidebar-foreground: hsl(240, 246%, 252%);\n  --sidebar-primary: hsl(31, 111%, 235%);\n  --sidebar-primary-foreground: hsl(255, 255%, 255%);\n  --sidebar-accent: hsl(35, 134%, 54%);\n  --sidebar-accent-foreground: hsl(255, 255%, 255%);\n  --sidebar-border: hsl(48, 54%, 61%);\n  --sidebar-ring: hsl(31, 111%, 235%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .file-tree-item:hover {\n    background-color: hsl(var(--muted));\n  }\n\n  .file-tree-item.selected {\n    background-color: hsl(var(--primary) / 0.2);\n    border-left: 2px solid hsl(var(--primary));\n  }\n\n  .tab-active {\n    background-color: hsl(var(--background));\n    border-bottom: 2px solid hsl(var(--primary));\n  }\n\n  .editor-area {\n    background-color: hsl(var(--background));\n    border: 1px solid hsl(var(--border));\n  }\n\n  .drag-over {\n    border: 2px dashed hsl(var(--primary));\n    background-color: hsl(var(--primary) / 0.1);\n  }\n\n  .status-indicator {\n    display: inline-block;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin-right: 8px;\n  }\n\n  .status-modified {\n    background-color: hsl(var(--accent));\n  }\n\n  .status-new {\n    background-color: hsl(var(--primary));\n  }\n\n  .status-deleted {\n    background-color: hsl(var(--destructive));\n  }\n\n  .loading-spinner {\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    from { transform: rotate(0deg); }\n    to { transform: rotate(360deg); }\n  }\n\n  .breadcrumb-separator::before {\n    content: \"/\";\n    margin: 0 8px;\n    color: hsl(var(--muted-foreground));\n  }\n\n  .code-font {\n    font-family: 'JetBrains Mono', 'Fira Code', monospace;\n  }\n\n  /* Mobile touch improvements */\n  .touch-manipulation {\n    touch-action: manipulation;\n  }\n\n  /* Custom scrollbar for mobile */\n  .scrollbar-thin {\n    scrollbar-width: thin;\n  }\n\n  .scrollbar-thumb-muted {\n    scrollbar-color: hsl(var(--muted)) transparent;\n  }\n\n  .scrollbar-track-transparent {\n    scrollbar-track-color: transparent;\n  }\n\n  /* Hide scrollbar on webkit browsers for mobile */\n  @media (max-width: 1024px) {\n    .scrollbar-thin::-webkit-scrollbar {\n      width: 2px;\n      height: 2px;\n    }\n    \n    .scrollbar-thin::-webkit-scrollbar-thumb {\n      background: hsl(var(--muted));\n      border-radius: 1px;\n    }\n    \n    .scrollbar-thin::-webkit-scrollbar-track {\n      background: transparent;\n    }\n  }\n}\n","size_bytes":5741},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/commit-dialog.tsx":{"content":"import { useState } from 'react';\nimport { Check, X, Loader2 } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport type { ModifiedFile } from '@/lib/schema';\n\ninterface CommitDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCommit: (message: string) => Promise<void>;\n  modifiedFiles: ModifiedFile[];\n  isLoading?: boolean;\n}\n\nexport function CommitDialog({ \n  isOpen, \n  onClose, \n  onCommit, \n  modifiedFiles, \n  isLoading = false \n}: CommitDialogProps) {\n  const [commitMessage, setCommitMessage] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!commitMessage.trim()) return;\n    \n    try {\n      await onCommit(commitMessage);\n      setCommitMessage('');\n      onClose();\n    } catch (error) {\n      console.error('Commit failed:', error);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'modified':\n        return 'status-modified';\n      case 'new':\n        return 'status-new';\n      case 'deleted':\n        return 'status-deleted';\n      default:\n        return 'status-modified';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'modified':\n        return 'M';\n      case 'new':\n        return 'A';\n      case 'deleted':\n        return 'D';\n      default:\n        return 'M';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"commit-dialog\">\n        <DialogHeader>\n          <DialogTitle>Commit Changes</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"commit-message\">Commit Message</Label>\n            <Textarea\n              id=\"commit-message\"\n              value={commitMessage}\n              onChange={(e) => setCommitMessage(e.target.value)}\n              placeholder=\"Describe your changes...\"\n              className=\"mt-1 resize-none\"\n              rows={3}\n              required\n              data-testid=\"commit-message-input\"\n            />\n          </div>\n\n          <div>\n            <Label>Changed Files ({modifiedFiles.length})</Label>\n            <div className=\"mt-2 space-y-1 max-h-32 overflow-y-auto bg-muted rounded-md p-2\">\n              {modifiedFiles.map((file, index) => (\n                <div \n                  key={index}\n                  className=\"flex items-center text-sm\"\n                  data-testid={`changed-file-${index}`}\n                >\n                  <div className={`status-indicator ${getStatusColor(file.status)}`} />\n                  <span className=\"text-xs font-mono mr-2 text-muted-foreground\">\n                    {getStatusLabel(file.status)}\n                  </span>\n                  <span className=\"truncate\">{file.path}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button \n              type=\"button\" \n              variant=\"secondary\" \n              onClick={onClose}\n              disabled={isLoading}\n              data-testid=\"cancel-commit\"\n            >\n              <X className=\"h-4 w-4 mr-1\" />\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={!commitMessage.trim() || isLoading}\n              data-testid=\"confirm-commit\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"h-4 w-4 mr-1 animate-spin\" />\n              ) : (\n                <Check className=\"h-4 w-4 mr-1\" />\n              )}\n              Commit\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3946},"client/src/components/file-tree.tsx":{"content":"import { useState } from 'react';\nimport { ChevronRight, ChevronDown, File, Folder, FolderOpen, FileCode, FileImage, FileText, Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport type { FileTreeItem } from '@/lib/schema';\nimport { cn } from '@/lib/utils';\n\ninterface FileTreeProps {\n  items: FileTreeItem[];\n  selectedPath?: string;\n  expandedPaths: Set<string>;\n  onItemClick: (item: FileTreeItem) => void;\n  onToggleExpanded: (path: string) => void;\n  onDeleteFile?: (file: FileTreeItem) => void;\n  modifiedFiles: Set<string>;\n  folderContents: Map<string, FileTreeItem[]>;\n  level?: number;\n}\n\nfunction getFileIcon(fileName: string, isDirectory: boolean) {\n  if (isDirectory) {\n    return { icon: Folder, color: 'text-primary' };\n  }\n\n  const extension = fileName.split('.').pop()?.toLowerCase();\n  \n  switch (extension) {\n    case 'js':\n    case 'jsx':\n    case 'ts':\n    case 'tsx':\n    case 'vue':\n    case 'py':\n    case 'java':\n    case 'cpp':\n    case 'c':\n    case 'php':\n    case 'rb':\n    case 'go':\n    case 'rs':\n      return { icon: FileCode, color: 'text-accent' };\n    case 'png':\n    case 'jpg':\n    case 'jpeg':\n    case 'gif':\n    case 'svg':\n    case 'webp':\n      return { icon: FileImage, color: 'text-orange-400' };\n    case 'md':\n    case 'txt':\n    case 'doc':\n    case 'docx':\n      return { icon: FileText, color: 'text-muted-foreground' };\n    case 'json':\n      return { icon: FileCode, color: 'text-blue-400' };\n    case 'css':\n    case 'scss':\n    case 'sass':\n      return { icon: FileCode, color: 'text-orange-400' };\n    case 'html':\n    case 'htm':\n      return { icon: FileCode, color: 'text-red-400' };\n    default:\n      return { icon: File, color: 'text-muted-foreground' };\n  }\n}\n\nexport function FileTree({ \n  items, \n  selectedPath, \n  expandedPaths, \n  onItemClick, \n  onToggleExpanded,\n  onDeleteFile,\n  modifiedFiles,\n  folderContents,\n  level = 0 \n}: FileTreeProps) {\n  const sortedItems = [...items].sort((a, b) => {\n    // Directories first, then files\n    if (a.type !== b.type) {\n      return a.type === 'dir' ? -1 : 1;\n    }\n    return a.name.localeCompare(b.name);\n  });\n\n  return (\n    <div className={cn(\"select-none\", level > 0 && \"ml-4\")}>\n      {sortedItems.map((item, index) => {\n        const isExpanded = expandedPaths.has(item.path);\n        const isSelected = selectedPath === item.path;\n        const isModified = modifiedFiles.has(item.path);\n        const { icon: Icon, color } = getFileIcon(item.name, item.type === 'dir');\n        \n        return (\n          <div key={`file-${item.path}-${item.sha || index}`}>\n            <div\n              className={cn(\n                \"file-tree-item group p-3 lg:p-2 cursor-pointer flex items-center text-sm hover:bg-muted transition-colors touch-manipulation\",\n                isSelected && \"selected bg-primary/20 border-l-2 border-primary\"\n              )}\n              onClick={() => onItemClick(item)}\n              data-testid={`file-tree-item-${item.path.replace(/[\\/\\s]/g, '-')}`}\n            >\n              {item.type === 'dir' && (\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onToggleExpanded(item.path);\n                  }}\n                  className=\"mr-1 p-1 lg:p-0.5 hover:bg-muted-foreground/20 rounded touch-manipulation\"\n                  data-testid={`toggle-folder-${item.path}`}\n                >\n                  {isExpanded ? (\n                    <ChevronDown className=\"h-3 w-3\" />\n                  ) : (\n                    <ChevronRight className=\"h-3 w-3\" />\n                  )}\n                </button>\n              )}\n              \n              {item.type === 'dir' ? (\n                isExpanded ? (\n                  <FolderOpen className={cn(\"mr-2 h-4 w-4\", color)} />\n                ) : (\n                  <Folder className={cn(\"mr-2 h-4 w-4\", color)} />\n                )\n              ) : (\n                <Icon className={cn(\"mr-2 h-4 w-4\", color)} />\n              )}\n              \n              <span className=\"flex-1 text-base lg:text-sm\">{item.name}</span>\n              \n              {/* Delete button for files only */}\n              {item.type === 'file' && onDeleteFile && (\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"h-6 w-6 p-0 ml-2 opacity-0 group-hover:opacity-100 hover:bg-red-100 hover:text-red-600 transition-all\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteFile(item);\n                  }}\n                  data-testid={`delete-file-${item.path.replace(/[\\/\\s]/g, '-')}`}\n                  title=\"Delete file\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              )}\n              \n              {isModified && (\n                <div className=\"status-indicator status-modified ml-auto\" title=\"Modified\" />\n              )}\n            </div>\n            \n            {/* Render nested folder contents */}\n            {item.type === 'dir' && isExpanded && folderContents.has(item.path) && (\n              <FileTree\n                items={folderContents.get(item.path) || []}\n                selectedPath={selectedPath}\n                expandedPaths={expandedPaths}\n                onItemClick={onItemClick}\n                onToggleExpanded={onToggleExpanded}\n                onDeleteFile={onDeleteFile}\n                modifiedFiles={modifiedFiles}\n                folderContents={folderContents}\n                level={level + 1}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":5694},"client/src/components/image-viewer.tsx":{"content":"import { Maximize2, Download } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface ImageViewerProps {\n  src: string;\n  alt: string;\n  fileName: string;\n}\n\nexport function ImageViewer({ src, alt, fileName }: ImageViewerProps) {\n  const handleDownload = () => {\n    const link = document.createElement('a');\n    link.href = src;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-background\">\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <h3 className=\"text-lg font-medium\">{fileName}</h3>\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={handleDownload} data-testid=\"download-image\">\n            <Download className=\"h-4 w-4 mr-1\" />\n            Download\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 p-4 overflow-auto flex items-center justify-center\">\n        <img \n          src={src} \n          alt={alt}\n          className=\"max-w-full max-h-full object-contain rounded-lg shadow-lg\"\n          data-testid=\"image-content\"\n        />\n      </div>\n    </div>\n  );\n}","size_bytes":1261},"client/src/components/monaco-editor.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { Loader2 } from 'lucide-react';\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  onCursorPositionChange?: (line: number, column: number) => void;\n}\n\nexport function MonacoEditor({ value, onChange, language, onCursorPositionChange }: MonacoEditorProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<any>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [monaco, setMonaco] = useState<any>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadMonaco = async () => {\n      try {\n        setError(null);\n        // Dynamically import Monaco Editor with optimized settings\n        const monacoModule = await import('monaco-editor');\n        \n        // Configure Monaco for React\n        monacoModule.editor.defineTheme('github-dark', {\n          base: 'vs-dark',\n          inherit: true,\n          rules: [\n            { token: 'comment', foreground: '6A737D' },\n            { token: 'keyword', foreground: 'F97583' },\n            { token: 'operator', foreground: 'F97583' },\n            { token: 'namespace', foreground: 'FFD700' },\n            { token: 'type', foreground: '79B8FF' },\n            { token: 'struct', foreground: '79B8FF' },\n            { token: 'class', foreground: '79B8FF' },\n            { token: 'interface', foreground: '79B8FF' },\n            { token: 'parameter', foreground: 'FFAB70' },\n            { token: 'variable', foreground: 'F8F8F2' },\n            { token: 'string', foreground: '9ECBFF' },\n            { token: 'number', foreground: '79B8FF' },\n            { token: 'regexp', foreground: '9ECBFF' },\n          ],\n          colors: {\n            'editor.background': '#0d1117',\n            'editor.foreground': '#f0f6fc',\n            'editorLineNumber.foreground': '#8b949e',\n            'editorLineNumber.activeForeground': '#f0f6fc',\n            'editor.selectionBackground': '#264f78',\n            'editor.inactiveSelectionBackground': '#3a3a3a',\n            'editorCursor.foreground': '#f0f6fc',\n            'editor.selectionHighlightBackground': '#add6ff26',\n            'editor.wordHighlightBackground': '#575757b8',\n            'editor.wordHighlightStrongBackground': '#004972b8',\n            'editorIndentGuide.background': '#404040',\n            'editorIndentGuide.activeBackground': '#707070',\n          }\n        });\n\n        // Disable workers to avoid import issues in development\n        (self as any).MonacoEnvironment = {\n          getWorker: () => {\n            return new Worker('data:text/javascript;charset=utf-8,' + encodeURIComponent(`\n              self.postMessage = function(data) {\n                // Simple stub worker\n              };\n            `));\n          }\n        };\n        \n        setMonaco(monacoModule);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Failed to load Monaco Editor:', error);\n        setError('Failed to load code editor');\n        setIsLoading(false);\n      }\n    };\n\n    loadMonaco();\n  }, []);\n\n  // Debounced resize handler to prevent ResizeObserver errors\n  const handleResize = useCallback(() => {\n    if (editorRef.current) {\n      requestAnimationFrame(() => {\n        try {\n          editorRef.current?.layout();\n        } catch (error) {\n          // Silently ignore ResizeObserver errors\n          if (!(error instanceof Error) || !error.message.includes('ResizeObserver')) {\n            console.error('Editor layout error:', error);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!monaco || !containerRef.current || isLoading) return;\n\n    // Create the editor\n    const editor = monaco.editor.create(containerRef.current, {\n      value,\n      language,\n      theme: 'github-dark',\n      fontSize: 14,\n      fontFamily: \"'JetBrains Mono', 'Fira Code', monospace\",\n      lineNumbers: 'on',\n      roundedSelection: false,\n      scrollBeyondLastLine: false,\n      minimap: { enabled: true },\n      wordWrap: 'on',\n      automaticLayout: false, // Disable automatic layout to prevent ResizeObserver errors\n      tabSize: 2,\n      insertSpaces: true,\n      renderWhitespace: 'selection',\n      scrollbar: {\n        vertical: 'visible',\n        horizontal: 'visible',\n        verticalScrollbarSize: 12,\n        horizontalScrollbarSize: 12,\n      },\n    });\n\n    editorRef.current = editor;\n\n    // Set up manual resize handling with error catching\n    let resizeTimeout: NodeJS.Timeout;\n    const debouncedResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(handleResize, 100);\n    };\n\n    // Add window resize listener\n    window.addEventListener('resize', debouncedResize);\n\n    // Initial layout\n    setTimeout(() => handleResize(), 0);\n\n    // Listen for content changes\n    const disposable = editor.onDidChangeModelContent(() => {\n      const newValue = editor.getValue();\n      onChange(newValue);\n    });\n\n    // Listen for cursor position changes\n    const cursorDisposable = editor.onDidChangeCursorPosition((e: any) => {\n      if (onCursorPositionChange) {\n        onCursorPositionChange(e.position.lineNumber, e.position.column);\n      }\n    });\n\n    return () => {\n      window.removeEventListener('resize', debouncedResize);\n      clearTimeout(resizeTimeout);\n      disposable.dispose();\n      cursorDisposable.dispose();\n      editor.dispose();\n    };\n  }, [monaco, isLoading, language, handleResize]);\n\n  useEffect(() => {\n    if (editorRef.current && value !== editorRef.current.getValue()) {\n      // Preserve cursor position when updating value\n      const position = editorRef.current.getPosition();\n      const selection = editorRef.current.getSelection();\n      \n      editorRef.current.setValue(value);\n      \n      // Restore cursor position and selection if they exist\n      if (position) {\n        editorRef.current.setPosition(position);\n      }\n      if (selection) {\n        editorRef.current.setSelection(selection);\n      }\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (editorRef.current && monaco) {\n      monaco.editor.setModelLanguage(editorRef.current.getModel(), language);\n    }\n  }, [language, monaco]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-background\">\n        <div className=\"flex items-center space-x-2\">\n          <Loader2 className=\"h-5 w-5 animate-spin text-primary\" />\n          <span className=\"text-sm text-muted-foreground\">Loading editor...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full bg-background\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"text-red-500\">{error}</div>\n          <button \n            onClick={() => { setError(null); setIsLoading(true); }}\n            className=\"text-primary hover:underline\"\n          >\n            Try again\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      ref={containerRef} \n      className=\"w-full h-full editor-area\"\n      data-testid=\"monaco-editor\"\n    />\n  );\n}\n","size_bytes":7200},"client/src/components/upload-zone.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Upload, X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface UploadZoneProps {\n  onFilesUpload: (files: File[]) => void;\n  className?: string;\n}\n\nexport function UploadZone({ onFilesUpload, className }: UploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    handleFiles(files);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    handleFiles(files);\n  };\n\n  const handleFiles = (files: File[]) => {\n    setUploadedFiles(prev => [...prev, ...files]);\n    onFilesUpload(files);\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div\n        className={cn(\n          \"border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\",\n          isDragOver && \"drag-over border-primary bg-primary/10\"\n        )}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={handleClick}\n        data-testid=\"upload-zone\"\n      >\n        <Upload className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n        <p className=\"text-sm text-muted-foreground\">\n          Drop files here or click to upload\n        </p>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          className=\"hidden\"\n          onChange={handleFileSelect}\n          data-testid=\"file-input\"\n        />\n      </div>\n\n      {uploadedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium\">Uploaded Files ({uploadedFiles.length})</h4>\n          <div className=\"space-y-1 max-h-32 overflow-y-auto\">\n            {uploadedFiles.map((file, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-2 bg-muted rounded text-sm\"\n                data-testid={`uploaded-file-${index}`}\n              >\n                <span className=\"truncate\">{file.name}</span>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    removeFile(index);\n                  }}\n                  className=\"ml-2 p-1 hover:bg-background rounded\"\n                  data-testid={`remove-file-${index}`}\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3219},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/github-api.ts":{"content":"import type { Repository, FileTreeItem, FileContent, CommitData, GitHubUser, ModifiedFile } from \"@/lib/schema\";\n\nclass GitHubAPI {\n  private token: string;\n  private baseURL = 'https://api.github.com';\n\n  constructor() {\n    this.token = '';\n  }\n\n  setToken(token: string) {\n    this.token = token;\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}, requireAuth: boolean = false): Promise<T> {\n    if (requireAuth && !this.token) {\n      throw new Error('GitHub token not set. Please authenticate first.');\n    }\n    \n    const url = `${this.baseURL}${endpoint}`;\n    console.log(`Making GitHub API request: ${options.method || 'GET'} ${url}`);\n    \n    const headers: Record<string, string> = {\n      'Accept': 'application/vnd.github.v3+json',\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string> || {}),\n    };\n\n    // Add authorization header only if token is available\n    if (this.token) {\n      headers['Authorization'] = `token ${this.token}`;\n    }\n    \n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      let errorData;\n      try {\n        errorData = await response.json();\n      } catch {\n        errorData = { message: response.statusText };\n      }\n      \n      const errorMessage = `GitHub API Error: ${response.status} ${errorData.message || response.statusText}`;\n      console.error('GitHub API request failed:', {\n        url,\n        method: options.method || 'GET',\n        status: response.status,\n        statusText: response.statusText,\n        errorData\n      });\n      \n      throw new Error(errorMessage);\n    }\n\n    return response.json();\n  }\n\n  async getUser(): Promise<GitHubUser> {\n    return this.request<GitHubUser>('/user');\n  }\n\n  async getRepositories(): Promise<Repository[]> {\n    return this.request<Repository[]>('/user/repos?sort=updated&per_page=100');\n  }\n\n  async getUserRepositories(username: string): Promise<Repository[]> {\n    return this.request<Repository[]>(`/users/${username}/repos?sort=updated&per_page=100`);\n  }\n\n  async getRepository(owner: string, repo: string): Promise<Repository> {\n    return this.request<Repository>(`/repos/${owner}/${repo}`);\n  }\n\n  async getContents(owner: string, repo: string, path: string = '', ref?: string): Promise<FileTreeItem[]> {\n    const endpoint = `/repos/${owner}/${repo}/contents/${path}${ref ? `?ref=${ref}` : ''}`;\n    const response = await this.request<FileTreeItem | FileTreeItem[]>(endpoint);\n    return Array.isArray(response) ? response : [response];\n  }\n\n  async getFileContent(owner: string, repo: string, path: string, ref?: string): Promise<FileContent> {\n    const endpoint = `/repos/${owner}/${repo}/contents/${path}${ref ? `?ref=${ref}` : ''}`;\n    const response = await this.request<FileContent>(endpoint);\n    \n    if (response.content) {\n      // Decode base64 content\n      response.content = atob(response.content.replace(/\\n/g, ''));\n    }\n    \n    return response;\n  }\n\n  async createOrUpdateFile(\n    owner: string,\n    repo: string,\n    path: string,\n    content: string,\n    message: string,\n    sha?: string,\n    branch?: string\n  ): Promise<any> {\n    try {\n      const body: any = {\n        message,\n        content: btoa(unescape(encodeURIComponent(content))), // Handle UTF-8 content properly\n      };\n\n      if (sha) {\n        body.sha = sha;\n      }\n\n      if (branch) {\n        body.branch = branch;\n      }\n\n      return this.request(`/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n      });\n    } catch (error) {\n      console.error(`Failed to create/update file ${path}:`, error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`Failed to commit file \"${path}\": ${errorMessage}`);\n    }\n  }\n\n  async deleteFile(\n    owner: string,\n    repo: string,\n    path: string,\n    message: string,\n    sha: string,\n    branch?: string\n  ): Promise<any> {\n    try {\n      const body: any = {\n        message,\n        sha,\n      };\n\n      if (branch) {\n        body.branch = branch;\n      }\n\n      return this.request(`/repos/${owner}/${repo}/contents/${encodeURIComponent(path)}`, {\n        method: 'DELETE',\n        body: JSON.stringify(body),\n      });\n    } catch (error) {\n      console.error(`Failed to delete file ${path}:`, error);\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      throw new Error(`Failed to delete file \"${path}\": ${errorMessage}`);\n    }\n  }\n\n  async createBranch(owner: string, repo: string, branchName: string, fromBranch: string = 'main'): Promise<any> {\n    // Get the SHA of the from branch\n    const refResponse = await this.request<{ object: { sha: string } }>(`/repos/${owner}/${repo}/git/refs/heads/${fromBranch}`);\n    \n    // Create new branch\n    return this.request(`/repos/${owner}/${repo}/git/refs`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ref: `refs/heads/${branchName}`,\n        sha: refResponse.object.sha,\n      }),\n    });\n  }\n\n  async commitMultipleFiles(\n    owner: string,\n    repo: string,\n    files: ModifiedFile[],\n    commitMessage: string,\n    branch: string = 'main'\n  ): Promise<any> {\n    try {\n      console.log(`Committing ${files.length} files to ${owner}/${repo} on branch ${branch}`);\n      \n      // For simplicity, we'll commit files one by one\n      // In a production app, you might want to use the Git Data API for atomic commits\n      const results = [];\n      \n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        console.log(`Processing file ${i + 1}/${files.length}: ${file.path} (${file.status})`);\n        \n        try {\n          if (file.status === 'deleted') {\n            if (file.sha) {\n              const result = await this.deleteFile(owner, repo, file.path, commitMessage, file.sha, branch);\n              results.push(result);\n            } else {\n              console.warn(`Skipping deletion of ${file.path} - no SHA provided`);\n            }\n          } else {\n            const result = await this.createOrUpdateFile(\n              owner, \n              repo, \n              file.path, \n              file.content, \n              commitMessage, \n              file.sha, \n              branch\n            );\n            results.push(result);\n          }\n          console.log(`Successfully processed ${file.path}`);\n        } catch (fileError) {\n          const errorMessage = fileError instanceof Error ? fileError.message : String(fileError);\n          console.error(`Failed to process file ${file.path}:`, fileError);\n          throw new Error(`Failed to commit file \"${file.path}\": ${errorMessage}`);\n        }\n      }\n      \n      console.log(`Successfully committed all ${files.length} files`);\n      return results;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error('Error committing files:', error);\n      throw new Error(`Commit failed: ${errorMessage}`);\n    }\n  }\n\n  async createRepository(data: {\n    name: string;\n    description?: string;\n    private?: boolean;\n    auto_init?: boolean;\n    gitignore_template?: string;\n    license_template?: string;\n  }): Promise<Repository> {\n    return this.request<Repository>('/user/repos', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }, true);\n  }\n\n  async getRepositoryPages(owner: string, repo: string): Promise<any> {\n    try {\n      return await this.request(`/repos/${owner}/${repo}/pages`);\n    } catch (error) {\n      // GitHub returns 404 if Pages is not enabled\n      if (error instanceof Error && error.message.includes('404')) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  async enableGitHubPages(\n    owner: string,\n    repo: string,\n    options: {\n      source: {\n        branch: string;\n        path?: string;\n      };\n    }\n  ): Promise<any> {\n    return this.request(`/repos/${owner}/${repo}/pages`, {\n      method: 'POST',\n      body: JSON.stringify(options),\n    }, true);\n  }\n\n  async updateGitHubPages(\n    owner: string,\n    repo: string,\n    options: {\n      source: {\n        branch: string;\n        path?: string;\n      };\n    }\n  ): Promise<any> {\n    return this.request(`/repos/${owner}/${repo}/pages`, {\n      method: 'PUT',\n      body: JSON.stringify(options),\n    }, true);\n  }\n\n  async disableGitHubPages(owner: string, repo: string): Promise<void> {\n    await this.request(`/repos/${owner}/${repo}/pages`, {\n      method: 'DELETE',\n    }, true);\n  }\n\n  async getBranches(owner: string, repo: string): Promise<Array<{ name: string; commit: { sha: string } }>> {\n    return this.request<Array<{ name: string; commit: { sha: string } }>>(`/repos/${owner}/${repo}/branches`);\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token;\n  }\n}\n\nexport const githubAPI = new GitHubAPI();\n","size_bytes":8943},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/repository-manager.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  Github, \n  RefreshCw, \n  Save, \n  Settings, \n  Plus, \n  FolderPlus, \n  Upload,\n  Clock,\n  Search,\n  GitBranch,\n  Replace,\n  FileText,\n  Monitor,\n  Menu,\n  X,\n  ChevronLeft,\n  Eye,\n  Edit,\n  Globe,\n  Building,\n  Info,\n  Trash2\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { githubAPI } from '@/lib/github-api';\nimport { FileTree } from '@/components/file-tree';\nimport { MonacoEditor } from '@/components/monaco-editor';\nimport { ImageViewer } from '@/components/image-viewer';\nimport { MarkdownViewer } from '@/components/markdown-viewer';\nimport { CommitDialog } from '@/components/commit-dialog';\nimport { UploadZone } from '@/components/upload-zone';\nimport type { Repository, FileTreeItem, FileContent, TabItem, ModifiedFile } from '@/lib/schema';\nimport { cn } from '@/lib/utils';\n\nexport default function RepositoryManager() {\n  const [selectedRepo, setSelectedRepo] = useState<Repository | null>(null);\n  const [currentPath, setCurrentPath] = useState('');\n  const [expandedPaths, setExpandedPaths] = useState<Set<string>>(new Set());\n  const [openTabs, setOpenTabs] = useState<TabItem[]>([]);\n  const [activeTab, setActiveTab] = useState<string>('');\n  const [modifiedFiles, setModifiedFiles] = useState<Map<string, ModifiedFile>>(new Map());\n  const [isCommitDialogOpen, setIsCommitDialogOpen] = useState(false);\n  const [githubToken, setGithubToken] = useState('');\n  const [tokenInput, setTokenInput] = useState('');\n  const [username, setUsername] = useState('elfarsaf-dev');\n  const [usernameInput, setUsernameInput] = useState('elfarsaf-dev');\n  const [cursorPosition, setCursorPosition] = useState({ line: 1, column: 1 });\n  const [showNewFileDialog, setShowNewFileDialog] = useState(false);\n  const [showNewFolderDialog, setShowNewFolderDialog] = useState(false);\n  const [newFileName, setNewFileName] = useState('');\n  const [newFolderName, setNewFolderName] = useState('');\n  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);\n  const [isMarkdownPreview, setIsMarkdownPreview] = useState(false);\n  const [showCreateRepoDialog, setShowCreateRepoDialog] = useState(false);\n  const [showSettingsDialog, setShowSettingsDialog] = useState(false);\n  const [newRepoName, setNewRepoName] = useState('');\n  const [newRepoDescription, setNewRepoDescription] = useState('');\n  const [isRepoPrivate, setIsRepoPrivate] = useState(false);\n  const [autoInit, setAutoInit] = useState(true);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [fileToDelete, setFileToDelete] = useState<FileTreeItem | null>(null);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check for authentication on component mount\n  useEffect(() => {\n    console.log('Token available:', !!githubToken);\n    console.log('GitHub authenticated:', githubAPI.isAuthenticated());\n    \n    if (githubToken && !githubAPI.isAuthenticated()) {\n      console.log('Setting GitHub token...');\n      githubAPI.setToken(githubToken);\n    }\n  }, [githubToken]);\n\n  // Fetch repositories by username\n  const { data: repositories, isLoading: reposLoading, refetch: refetchRepos, error: reposError } = useQuery({\n    queryKey: ['repositories', username],\n    queryFn: async () => {\n      console.log(`Fetching repositories for user: ${username}`);\n      try {\n        const repos = await githubAPI.getUserRepositories(username);\n        console.log('Repositories fetched:', repos.length);\n        return repos;\n      } catch (error) {\n        console.error('Error fetching repositories:', error);\n        toast({\n          title: 'GitHub API Error',\n          description: `Failed to fetch repositories for ${username}: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          variant: 'destructive',\n        });\n        throw error;\n      }\n    },\n    enabled: !!username,\n  });\n\n  // Auto-select bos-villa-tw repository\n  useEffect(() => {\n    if (repositories && !selectedRepo) {\n      const defaultRepo = repositories.find(r => r.full_name === 'elfarsaf-dev/bos-villa-tw');\n      if (defaultRepo) {\n        setSelectedRepo(defaultRepo);\n      }\n    }\n  }, [repositories, selectedRepo]);\n\n  // Track folder contents for expanded directories\n  const [folderContents, setFolderContents] = useState<Map<string, FileTreeItem[]>>(new Map());\n\n  // Fetch file tree for selected repository\n  const { data: fileTree, isLoading: treeLoading } = useQuery({\n    queryKey: ['fileTree', selectedRepo?.owner.login, selectedRepo?.name, currentPath],\n    queryFn: () => {\n      if (!selectedRepo) return [];\n      return githubAPI.getContents(selectedRepo.owner.login, selectedRepo.name, currentPath);\n    },\n    enabled: !!selectedRepo,\n  });\n\n  // Fetch GitHub Pages settings for selected repository\n  const { data: pagesData, isLoading: pagesLoading } = useQuery({\n    queryKey: ['pages', selectedRepo?.owner?.login, selectedRepo?.name],\n    queryFn: async () => {\n      if (!selectedRepo || !githubToken) return null;\n      return githubAPI.getRepositoryPages(selectedRepo.owner.login, selectedRepo.name);\n    },\n    enabled: !!(selectedRepo && githubToken),\n    staleTime: 30000,\n  });\n\n  // Fetch branches for GitHub Pages configuration\n  const { data: branches } = useQuery({\n    queryKey: ['branches', selectedRepo?.owner?.login, selectedRepo?.name],\n    queryFn: async () => {\n      if (!selectedRepo) return [];\n      return githubAPI.getBranches(selectedRepo.owner.login, selectedRepo.name);\n    },\n    enabled: !!selectedRepo,\n    staleTime: 60000,\n  });\n\n  // Function to load folder contents\n  const loadFolderContents = async (folderPath: string) => {\n    if (!selectedRepo || folderContents.has(folderPath)) return;\n    \n    try {\n      const contents = await githubAPI.getContents(\n        selectedRepo.owner.login, \n        selectedRepo.name, \n        folderPath\n      );\n      setFolderContents(prev => new Map(prev).set(folderPath, contents));\n    } catch (error) {\n      console.error('Error loading folder contents:', error);\n      toast({\n        title: 'Error',\n        description: `Failed to load folder contents: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  // Commit mutation\n  const commitMutation = useMutation({\n    mutationFn: async (commitMessage: string) => {\n      if (!selectedRepo) throw new Error('No repository selected');\n      \n      const filesToCommit = Array.from(modifiedFiles.values());\n      return githubAPI.commitMultipleFiles(\n        selectedRepo.owner.login,\n        selectedRepo.name,\n        filesToCommit,\n        commitMessage\n      );\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Changes committed successfully!',\n      });\n      setModifiedFiles(new Map());\n      // Update all file tree related queries\n      queryClient.invalidateQueries({ queryKey: ['fileTree'] });\n      queryClient.invalidateQueries({ queryKey: ['folderContents'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: `Failed to commit changes: ${error.message}`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleRepoChange = (repoFullName: string) => {\n    const repo = repositories?.find(r => r.full_name === repoFullName);\n    if (repo) {\n      setSelectedRepo(repo);\n      setCurrentPath('');\n      setOpenTabs([]);\n      setActiveTab('');\n      setModifiedFiles(new Map());\n      setExpandedPaths(new Set());\n    }\n  };\n\n  const isImageFile = (fileName: string): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return ['png', 'jpg', 'jpeg', 'gif', 'svg', 'webp', 'bmp', 'ico'].includes(extension || '');\n  };\n\n  const isMarkdownFile = (fileName: string): boolean => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    return extension === 'md';\n  };\n\n  const handleFileClick = async (item: FileTreeItem) => {\n    if (item.type === 'dir') {\n      const isExpanded = expandedPaths.has(item.path);\n      const newExpanded = new Set(expandedPaths);\n      \n      if (isExpanded) {\n        newExpanded.delete(item.path);\n      } else {\n        newExpanded.add(item.path);\n        // Load folder contents when expanding\n        await loadFolderContents(item.path);\n      }\n      setExpandedPaths(newExpanded);\n    } else {\n      // Open file\n      try {\n        if (!selectedRepo) return;\n        \n        const existingTab = openTabs.find(tab => tab.path === item.path);\n        if (!existingTab) {\n          let content = '';\n          let isImage = false;\n          \n          let sha: string | undefined;\n          \n          if (isImageFile(item.name)) {\n            // For images, use the download URL directly\n            content = item.download_url || '';\n            isImage = true;\n            sha = item.sha; // Use SHA from the file tree item\n          } else {\n            // For text files, fetch and decode content\n            const fileContent = await githubAPI.getFileContent(\n              selectedRepo.owner.login,\n              selectedRepo.name,\n              item.path\n            );\n            content = fileContent.content;\n            sha = fileContent.sha; // Use SHA from the file content\n          }\n          \n          const language = getLanguageFromFileName(item.name);\n          const newTab: TabItem = {\n            path: item.path,\n            name: item.name,\n            content,\n            isModified: false,\n            language: isImage ? 'image' : language,\n            sha,\n          };\n          \n          setOpenTabs(prev => [...prev, newTab]);\n        }\n        setActiveTab(item.path);\n        // Reset markdown preview when switching to a new file\n        setIsMarkdownPreview(false);\n      } catch (error) {\n        toast({\n          title: 'Error',\n          description: `Failed to open file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          variant: 'destructive',\n        });\n      }\n    }\n  };\n\n  const handleToggleExpanded = async (path: string) => {\n    const newExpanded = new Set(expandedPaths);\n    if (newExpanded.has(path)) {\n      newExpanded.delete(path);\n    } else {\n      newExpanded.add(path);\n      // Load folder contents when expanding\n      await loadFolderContents(path);\n    }\n    setExpandedPaths(newExpanded);\n  };\n\n  const handleEditorChange = (value: string) => {\n    const currentTab = openTabs.find(tab => tab.path === activeTab);\n    if (!currentTab) return;\n\n    // Update tab content\n    setOpenTabs(prev => prev.map(tab => \n      tab.path === activeTab \n        ? { ...tab, content: value, isModified: true }\n        : tab\n    ));\n\n    // Track modified file with SHA from the original tab\n    const modifiedFile: ModifiedFile = {\n      path: currentTab.path,\n      content: value,\n      sha: currentTab.sha, // Include the original SHA for existing files\n      status: currentTab.sha ? 'modified' : 'new', // If no SHA, it's a new file\n    };\n\n    setModifiedFiles(prev => new Map(prev.set(currentTab.path, modifiedFile)));\n  };\n\n  const handleCloseTab = (path: string) => {\n    setOpenTabs(prev => prev.filter(tab => tab.path !== path));\n    if (activeTab === path) {\n      const remainingTabs = openTabs.filter(tab => tab.path !== path);\n      setActiveTab(remainingTabs.length > 0 ? remainingTabs[0].path : '');\n      setIsMarkdownPreview(false);\n    }\n  };\n\n  const toggleMarkdownPreview = () => {\n    setIsMarkdownPreview(prev => !prev);\n  };\n\n  const handleSaveFile = async () => {\n    const currentTab = openTabs.find(tab => tab.path === activeTab);\n    if (!currentTab || !selectedRepo) return;\n\n    try {\n      await githubAPI.createOrUpdateFile(\n        selectedRepo.owner.login,\n        selectedRepo.name,\n        currentTab.path,\n        currentTab.content,\n        `Update ${currentTab.name}`,\n        undefined, // SHA will be fetched automatically\n        selectedRepo.default_branch\n      );\n\n      // Mark as saved\n      setOpenTabs(prev => prev.map(tab => \n        tab.path === activeTab \n          ? { ...tab, isModified: false }\n          : tab\n      ));\n\n      // Remove from modified files\n      const newModifiedFiles = new Map(modifiedFiles);\n      newModifiedFiles.delete(currentTab.path);\n      setModifiedFiles(newModifiedFiles);\n\n      toast({\n        title: 'Success',\n        description: 'File saved successfully!',\n      });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to save file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleFilesUpload = async (files: File[]) => {\n    if (!selectedRepo) return;\n\n    try {\n      for (const file of files) {\n        const content = await file.text();\n        const path = `${currentPath ? `${currentPath}/` : ''}${file.name}`;\n        \n        await githubAPI.createOrUpdateFile(\n          selectedRepo.owner.login,\n          selectedRepo.name,\n          path,\n          content,\n          `Upload ${file.name}`,\n          undefined,\n          selectedRepo.default_branch\n        );\n      }\n\n      toast({\n        title: 'Success',\n        description: `${files.length} file(s) uploaded successfully!`,\n      });\n\n      // Refresh all file tree related queries with comprehensive invalidation  \n      queryClient.invalidateQueries({ queryKey: ['fileTree'] });\n      queryClient.invalidateQueries({ queryKey: ['folderContents'] });\n      // Force refetch the current path specifically\n      if (selectedRepo) {\n        queryClient.invalidateQueries({ \n          queryKey: ['fileTree', selectedRepo.owner.login, selectedRepo.name, currentPath] \n        });\n      }\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to upload files: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleCreateFile = async () => {\n    if (!selectedRepo || !newFileName.trim()) return;\n\n    try {\n      const filePath = currentPath ? `${currentPath}/${newFileName}` : newFileName;\n      await githubAPI.createOrUpdateFile(\n        selectedRepo.owner.login,\n        selectedRepo.name,\n        filePath,\n        '// New file\\n',\n        `Create ${newFileName}`,\n        undefined,\n        selectedRepo.default_branch\n      );\n\n      toast({\n        title: 'Success',\n        description: `File ${newFileName} created successfully!`,\n      });\n\n      // Refresh all file tree related queries with comprehensive invalidation  \n      queryClient.invalidateQueries({ queryKey: ['fileTree'] });\n      queryClient.invalidateQueries({ queryKey: ['folderContents'] });\n      // Force refetch the current path specifically\n      if (selectedRepo) {\n        queryClient.invalidateQueries({ \n          queryKey: ['fileTree', selectedRepo.owner.login, selectedRepo.name, currentPath] \n        });\n      }\n      setShowNewFileDialog(false);\n      setNewFileName('');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to create file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleCreateFolder = async () => {\n    if (!selectedRepo || !newFolderName.trim()) return;\n\n    try {\n      const folderPath = currentPath ? `${currentPath}/${newFolderName}` : newFolderName;\n      // Create a placeholder README.md file inside the folder (GitHub doesn't support empty folders)\n      await githubAPI.createOrUpdateFile(\n        selectedRepo.owner.login,\n        selectedRepo.name,\n        `${folderPath}/README.md`,\n        `# ${newFolderName}\\n\\nThis folder was created by Code Studio.`,\n        `Create folder ${newFolderName}`,\n        undefined,\n        selectedRepo.default_branch\n      );\n\n      toast({\n        title: 'Success', \n        description: `Folder ${newFolderName} created successfully!`,\n      });\n\n      // Refresh all file tree related queries with comprehensive invalidation  \n      queryClient.invalidateQueries({ queryKey: ['fileTree'] });\n      queryClient.invalidateQueries({ queryKey: ['folderContents'] });\n      // Force refetch the current path specifically\n      if (selectedRepo) {\n        queryClient.invalidateQueries({ \n          queryKey: ['fileTree', selectedRepo.owner.login, selectedRepo.name, currentPath] \n        });\n      }\n      setShowNewFolderDialog(false);\n      setNewFolderName('');\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to create folder: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const getLanguageFromFileName = (fileName: string): string => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'js': return 'javascript';\n      case 'jsx': return 'javascript';\n      case 'ts': return 'typescript';\n      case 'tsx': return 'typescript';\n      case 'py': return 'python';\n      case 'java': return 'java';\n      case 'cpp': case 'c': return 'cpp';\n      case 'php': return 'php';\n      case 'rb': return 'ruby';\n      case 'go': return 'go';\n      case 'rs': return 'rust';\n      case 'html': return 'html';\n      case 'css': return 'css';\n      case 'scss': return 'scss';\n      case 'json': return 'json';\n      case 'md': return 'markdown';\n      case 'xml': return 'xml';\n      case 'yaml': case 'yml': return 'yaml';\n      case 'sql': return 'sql';\n      default: return 'plaintext';\n    }\n  };\n\n  const handleTokenSubmit = () => {\n    if (tokenInput.trim()) {\n      setGithubToken(tokenInput.trim());\n      githubAPI.setToken(tokenInput.trim());\n      toast({\n        title: 'Success',\n        description: 'GitHub token berhasil diatur!',\n      });\n    }\n  };\n\n  const handleUsernameSubmit = () => {\n    if (usernameInput.trim()) {\n      setUsername(usernameInput.trim());\n      setSelectedRepo(null); // Clear selected repo when changing username\n    }\n  };\n\n  const handleCreateRepository = async () => {\n    if (!newRepoName.trim() || !githubToken) return;\n    \n    try {\n      const newRepo = await githubAPI.createRepository({\n        name: newRepoName.trim(),\n        description: newRepoDescription.trim() || undefined,\n        private: isRepoPrivate,\n        auto_init: autoInit,\n      });\n\n      toast({\n        title: 'Success',\n        description: `Repository ${newRepoName} created successfully!`,\n      });\n\n      // Refresh repositories and select the new one\n      queryClient.invalidateQueries({ queryKey: ['repositories'] });\n      setSelectedRepo(newRepo);\n      \n      // Close dialog and reset form\n      setShowCreateRepoDialog(false);\n      setNewRepoName('');\n      setNewRepoDescription('');\n      setIsRepoPrivate(false);\n      setAutoInit(true);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to create repository: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleToggleGitHubPages = async (enabled: boolean, branch: string = 'main') => {\n    if (!selectedRepo || !githubToken) return;\n    \n    try {\n      if (enabled) {\n        await githubAPI.enableGitHubPages(selectedRepo.owner.login, selectedRepo.name, {\n          source: { branch }\n        });\n        toast({\n          title: 'Success',\n          description: 'GitHub Pages enabled successfully!',\n        });\n      } else {\n        await githubAPI.disableGitHubPages(selectedRepo.owner.login, selectedRepo.name);\n        toast({\n          title: 'Success', \n          description: 'GitHub Pages disabled successfully!',\n        });\n      }\n      \n      // Refresh pages data\n      queryClient.invalidateQueries({ queryKey: ['pages'] });\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to ${enabled ? 'enable' : 'disable'} GitHub Pages: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleDeleteFile = (file: FileTreeItem) => {\n    setFileToDelete(file);\n    setShowDeleteDialog(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!selectedRepo || !fileToDelete || !githubToken) return;\n\n    try {\n      await githubAPI.deleteFile(\n        selectedRepo.owner.login,\n        selectedRepo.name,\n        fileToDelete.path,\n        `Delete ${fileToDelete.name}`,\n        fileToDelete.sha,\n        selectedRepo.default_branch\n      );\n\n      toast({\n        title: 'Success',\n        description: `File ${fileToDelete.name} deleted successfully!`,\n      });\n\n      // Close any open tab for this file\n      setOpenTabs(prev => prev.filter(tab => tab.path !== fileToDelete.path));\n      if (activeTab === fileToDelete.path) {\n        setActiveTab('');\n      }\n      \n      // Remove from modified files if it was modified\n      setModifiedFiles(prev => {\n        const updated = new Map(prev);\n        updated.delete(fileToDelete.path);\n        return updated;\n      });\n\n      // Refresh all file tree related queries\n      queryClient.invalidateQueries({ queryKey: ['fileTree'] });\n      queryClient.invalidateQueries({ queryKey: ['folderContents'] });\n      if (selectedRepo) {\n        queryClient.invalidateQueries({ \n          queryKey: ['fileTree', selectedRepo.owner.login, selectedRepo.name, currentPath] \n        });\n      }\n\n      // Close dialog and reset\n      setShowDeleteDialog(false);\n      setFileToDelete(null);\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: `Failed to delete file: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const currentTab = openTabs.find(tab => tab.path === activeTab);\n  const hasModifiedFiles = modifiedFiles.size > 0;\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-4 lg:px-6 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2 lg:space-x-4\">\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"lg:hidden h-8 w-8 p-0\"\n            onClick={() => setIsMobileSidebarOpen(!isMobileSidebarOpen)}\n            data-testid=\"mobile-menu-toggle\"\n          >\n            {isMobileSidebarOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n          </Button>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-6 h-6 lg:w-8 lg:h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <FileText className=\"h-3 w-3 lg:h-4 lg:w-4 text-white\" />\n            </div>\n            <h1 className=\"text-lg lg:text-xl font-semibold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              ELFAR-CODE\n            </h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-1 lg:space-x-2\">\n            {/* Username Input */}\n            <div className=\"flex items-center space-x-1\">\n              <Input\n                value={usernameInput}\n                onChange={(e) => setUsernameInput(e.target.value)}\n                placeholder=\"GitHub username\"\n                className=\"w-24 sm:w-32 lg:w-40 h-8 text-xs lg:text-sm\"\n                data-testid=\"username-input\"\n                onKeyDown={(e) => e.key === 'Enter' && handleUsernameSubmit()}\n                onBlur={handleUsernameSubmit}\n              />\n            </div>\n            \n            <Select \n              value={selectedRepo?.full_name || ''} \n              onValueChange={handleRepoChange}\n              disabled={reposLoading}\n            >\n              <SelectTrigger className=\"w-32 sm:w-48 lg:w-64 text-xs lg:text-sm\" data-testid=\"repository-select\">\n                <SelectValue placeholder={\n                  reposLoading ? \"Loading...\" : \n                  reposError ? \"Error\" :\n                  repositories?.length === 0 ? \"No repos\" :\n                  \"Select...\"\n                } />\n              </SelectTrigger>\n              <SelectContent>\n                {repositories?.map((repo) => (\n                  <SelectItem key={repo.id} value={repo.full_name}>\n                    {repo.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => refetchRepos()}\n              disabled={reposLoading}\n              data-testid=\"refresh-repos\"\n              className=\"hidden sm:flex\"\n            >\n              <RefreshCw className={cn(\"h-4 w-4 lg:mr-1\", reposLoading && \"animate-spin\")} />\n              <span className=\"hidden lg:inline\">Refresh</span>\n            </Button>\n            \n            <Button \n              size=\"sm\" \n              variant=\"outline\" \n              onClick={() => refetchRepos()}\n              disabled={reposLoading}\n              data-testid=\"refresh-repos-mobile\"\n              className=\"sm:hidden h-8 w-8 p-0\"\n            >\n              <RefreshCw className={cn(\"h-4 w-4\", reposLoading && \"animate-spin\")} />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {/* GitHub Token Input */}\n          {!githubAPI.isAuthenticated() && (\n            <div className=\"flex items-center space-x-2\">\n              <Input\n                type=\"password\"\n                value={tokenInput}\n                onChange={(e) => setTokenInput(e.target.value)}\n                placeholder=\"GitHub Token (ghp_...)\"\n                className=\"w-40 h-8 text-xs\"\n                data-testid=\"token-input\"\n                onKeyDown={(e) => e.key === 'Enter' && handleTokenSubmit()}\n              />\n              <Button \n                size=\"sm\"\n                onClick={handleTokenSubmit}\n                disabled={!tokenInput.trim()}\n                data-testid=\"submit-token\"\n                className=\"h-8\"\n              >\n                Login\n              </Button>\n            </div>\n          )}\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n            <span className=\"text-muted-foreground\">Online</span>\n          </div>\n          \n          <Button \n            size=\"sm\"\n            onClick={() => setIsCommitDialogOpen(true)}\n            disabled={!hasModifiedFiles}\n            data-testid=\"commit-changes\"\n          >\n            <Save className=\"h-4 w-4 mr-1\" />\n            Commit Changes\n            {hasModifiedFiles && (\n              <Badge variant=\"secondary\" className=\"ml-1\">\n                {modifiedFiles.size}\n              </Badge>\n            )}\n          </Button>\n          \n          {/* New Repository Button */}\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={() => setShowCreateRepoDialog(true)}\n            disabled={!githubToken}\n            title={!githubToken ? \"GitHub token required\" : \"Create new repository\"}\n            data-testid=\"new-repository\"\n          >\n            <Building className=\"h-4 w-4\" />\n          </Button>\n          \n          {/* Settings Button */}\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={() => setShowSettingsDialog(true)}\n            disabled={!selectedRepo || !githubToken}\n            title={!selectedRepo || !githubToken ? \"Select repository and authenticate\" : \"Repository settings\"}\n            data-testid=\"settings\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-73px)] relative\">\n        {/* Mobile Sidebar Overlay */}\n        {isMobileSidebarOpen && (\n          <div \n            className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\" \n            onClick={() => setIsMobileSidebarOpen(false)}\n            data-testid=\"mobile-sidebar-overlay\"\n          />\n        )}\n\n        {/* Sidebar */}\n        <aside className={cn(\n          \"w-80 bg-card border-r border-border flex flex-col transition-transform duration-200 ease-in-out z-50\",\n          \"lg:relative lg:translate-x-0\",\n          isMobileSidebarOpen \n            ? \"fixed translate-x-0 h-full\" \n            : \"fixed -translate-x-full lg:translate-x-0 h-[calc(100vh-73px)]\"\n        )}>\n          <div className=\"p-4 border-b border-border\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h2 className=\"font-medium text-sm uppercase tracking-wide text-muted-foreground\">\n                Files\n              </h2>\n              <div className=\"flex space-x-1\">\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"h-8 w-8 lg:h-7 lg:w-7 p-0 touch-manipulation\" \n                  onClick={() => setShowNewFileDialog(true)}\n                  data-testid=\"new-file\"\n                  title=\"New File\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"h-8 w-8 lg:h-7 lg:w-7 p-0 touch-manipulation\" \n                  onClick={() => setShowNewFolderDialog(true)}\n                  data-testid=\"new-folder\"\n                  title=\"New Folder\"\n                >\n                  <FolderPlus className=\"h-4 w-4\" />\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  className=\"h-8 w-8 lg:h-7 lg:w-7 p-0 touch-manipulation\" \n                  data-testid=\"upload-files\"\n                  title=\"Upload Files\"\n                >\n                  <Upload className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Breadcrumb */}\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <button \n                className=\"hover:text-foreground transition-colors\"\n                onClick={() => setCurrentPath('')}\n                data-testid=\"breadcrumb-root\"\n              >\n                root\n              </button>\n              {currentPath.split('/').filter(Boolean).map((segment, index, array) => (\n                <span key={index} className=\"flex items-center\">\n                  <span className=\"breadcrumb-separator\" />\n                  <button \n                    className=\"hover:text-foreground transition-colors\"\n                    onClick={() => setCurrentPath(array.slice(0, index + 1).join('/'))}\n                    data-testid={`breadcrumb-${segment}`}\n                  >\n                    {segment}\n                  </button>\n                </span>\n              ))}\n            </div>\n          </div>\n\n          {/* File Tree */}\n          <div className=\"flex-1 overflow-y-auto\">\n            {treeLoading ? (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                Loading files...\n              </div>\n            ) : fileTree ? (\n              <FileTree\n                items={fileTree}\n                selectedPath={activeTab}\n                expandedPaths={expandedPaths}\n                onItemClick={handleFileClick}\n                onToggleExpanded={handleToggleExpanded}\n                modifiedFiles={new Set(modifiedFiles.keys())}\n                folderContents={folderContents}\n              />\n            ) : (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                {selectedRepo ? 'No files found' : 'Select a repository to view files'}\n              </div>\n            )}\n          </div>\n\n          {/* Upload Zone */}\n          <div className=\"p-4 border-t border-border\">\n            <UploadZone onFilesUpload={handleFilesUpload} />\n          </div>\n        </aside>\n\n        {/* Main Editor */}\n        <main className=\"flex-1 flex flex-col lg:ml-0\">\n          {/* Editor Tabs */}\n          <div className=\"bg-card border-b border-border flex items-center\">\n            <div className=\"flex overflow-x-auto scrollbar-thin scrollbar-thumb-muted scrollbar-track-transparent\">\n              {openTabs.map((tab) => (\n                <div\n                  key={tab.path}\n                  className={cn(\n                    \"flex items-center px-3 lg:px-4 py-3 lg:py-2 text-sm border-r border-border cursor-pointer group hover:bg-muted transition-colors touch-manipulation min-w-[120px] lg:min-w-auto\",\n                    activeTab === tab.path && \"tab-active bg-background border-b-2 border-primary\"\n                  )}\n                  onClick={() => setActiveTab(tab.path)}\n                  data-testid={`tab-${tab.path}`}\n                >\n                  <FileText className=\"h-4 w-4 mr-2 text-accent flex-shrink-0\" />\n                  <span className=\"truncate max-w-[80px] lg:max-w-none\">{tab.name}</span>\n                  {tab.isModified && (\n                    <div className=\"status-indicator status-modified ml-2 flex-shrink-0\" />\n                  )}\n                  {/* Markdown Preview Toggle Button */}\n                  {isMarkdownFile(tab.name) && activeTab === tab.path && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"ml-2 h-6 w-6 lg:h-5 lg:w-5 p-0 touch-manipulation flex-shrink-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleMarkdownPreview();\n                      }}\n                      data-testid={`toggle-markdown-preview-${tab.path}`}\n                      title={isMarkdownPreview ? \"Switch to Edit Mode\" : \"Switch to Preview Mode\"}\n                    >\n                      {isMarkdownPreview ? (\n                        <Edit className=\"h-3 w-3 text-primary\" />\n                      ) : (\n                        <Eye className=\"h-3 w-3 text-primary\" />\n                      )}\n                    </Button>\n                  )}\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"ml-2 h-6 w-6 lg:h-5 lg:w-5 p-0 opacity-0 group-hover:opacity-100 touch-manipulation flex-shrink-0\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleCloseTab(tab.path);\n                    }}\n                    data-testid={`close-tab-${tab.path}`}\n                  >\n                    <span className=\"text-sm lg:text-xs\">Ã—</span>\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {currentTab && (\n              <div className=\"ml-auto px-4 py-2 flex items-center space-x-2 text-xs text-muted-foreground\">\n                <span data-testid=\"cursor-position\">\n                  Line {cursorPosition.line}, Column {cursorPosition.column}\n                </span>\n                <span>UTF-8</span>\n                <span>{currentTab.language.toUpperCase()}</span>\n              </div>\n            )}\n          </div>\n\n          {/* Editor Content */}\n          <div className=\"flex-1 relative\">\n            {currentTab ? (\n              currentTab.language === 'image' ? (\n                <ImageViewer\n                  src={currentTab.content}\n                  alt={currentTab.name}\n                  fileName={currentTab.name}\n                />\n              ) : isMarkdownFile(currentTab.name) && isMarkdownPreview ? (\n                <MarkdownViewer\n                  content={currentTab.content}\n                  fileName={currentTab.name}\n                />\n              ) : (\n                <MonacoEditor\n                  value={currentTab.content}\n                  onChange={handleEditorChange}\n                  language={currentTab.language}\n                  onCursorPositionChange={(line, column) => setCursorPosition({ line, column })}\n                />\n              )\n            ) : (\n              <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n                <div className=\"text-center space-y-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-primary/20 to-accent/20 rounded-2xl mx-auto flex items-center justify-center\">\n                    <FileText className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-medium mb-2\">Welcome to Code Studio</h3>\n                    <p className=\"text-sm\">Select a file to start editing or viewing</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Floating Save Button - Bigger on mobile */}\n            {currentTab?.isModified && (\n              <Button\n                className=\"absolute bottom-4 right-4 lg:bottom-6 lg:right-6 h-14 w-14 lg:h-12 lg:w-12 rounded-full shadow-lg touch-manipulation\"\n                onClick={handleSaveFile}\n                data-testid=\"save-file\"\n              >\n                <Save className=\"h-5 w-5 lg:h-4 lg:w-4\" />\n              </Button>\n            )}\n          </div>\n        </main>\n\n        {/* Right Panel */}\n        <aside className=\"w-64 bg-card border-l border-border hidden lg:flex flex-col\">\n          {/* File Properties */}\n          {currentTab && (\n            <div className=\"p-4 border-b border-border\">\n              <h3 className=\"font-medium text-sm uppercase tracking-wide text-muted-foreground mb-3\">\n                File Info\n              </h3>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Size:</span>\n                  <span>{(currentTab.content.length / 1024).toFixed(1)} KB</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Type:</span>\n                  <span>{currentTab.language}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Status:</span>\n                  <span className={currentTab.isModified ? \"text-accent\" : \"text-muted-foreground\"}>\n                    {currentTab.isModified ? \"Modified\" : \"Saved\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Recent Changes */}\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-medium text-sm uppercase tracking-wide text-muted-foreground mb-3\">\n              Recent Changes\n            </h3>\n            <div className=\"space-y-3\">\n              {Array.from(modifiedFiles.values()).map((file, index) => (\n                <div key={index} className=\"flex items-start space-x-2\">\n                  <div className={`status-indicator ${file.status === 'new' ? 'status-new' : 'status-modified'} mt-1.5`} />\n                  <div className=\"text-sm\">\n                    <div className=\"font-medium\">{file.path.split('/').pop()}</div>\n                    <div className=\"text-muted-foreground text-xs\">\n                      {file.status === 'new' ? 'New file' : 'Modified'}\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {modifiedFiles.size === 0 && (\n                <div className=\"text-xs text-muted-foreground\">No recent changes</div>\n              )}\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"p-4\">\n            <h3 className=\"font-medium text-sm uppercase tracking-wide text-muted-foreground mb-3\">\n              Quick Actions\n            </h3>\n            <div className=\"space-y-2\">\n              <Button variant=\"ghost\" className=\"w-full justify-start text-sm\" data-testid=\"find-files\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                Find in files\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-sm\" data-testid=\"find-replace\">\n                <Replace className=\"h-4 w-4 mr-2\" />\n                Find and replace\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start text-sm\" data-testid=\"create-branch\">\n                <GitBranch className=\"h-4 w-4 mr-2\" />\n                Create branch\n              </Button>\n            </div>\n          </div>\n        </aside>\n      </div>\n\n\n      {/* Commit Dialog */}\n      <CommitDialog\n        isOpen={isCommitDialogOpen}\n        onClose={() => setIsCommitDialogOpen(false)}\n        onCommit={(message) => commitMutation.mutateAsync(message)}\n        modifiedFiles={Array.from(modifiedFiles.values())}\n        isLoading={commitMutation.isPending}\n      />\n\n      {/* New File Dialog */}\n      <Dialog open={showNewFileDialog} onOpenChange={setShowNewFileDialog}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"new-file-dialog\">\n          <DialogHeader>\n            <DialogTitle>Create New File</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              value={newFileName}\n              onChange={(e) => setNewFileName(e.target.value)}\n              placeholder=\"Enter file name (e.g., index.js, style.css)\"\n              data-testid=\"new-file-name-input\"\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateFile()}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => { setShowNewFileDialog(false); setNewFileName(''); }}\n                data-testid=\"cancel-new-file\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateFile}\n                disabled={!newFileName.trim()}\n                data-testid=\"create-file\"\n              >\n                Create File\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* New Folder Dialog */}\n      <Dialog open={showNewFolderDialog} onOpenChange={setShowNewFolderDialog}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"new-folder-dialog\">\n          <DialogHeader>\n            <DialogTitle>Create New Folder</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              value={newFolderName}\n              onChange={(e) => setNewFolderName(e.target.value)}\n              placeholder=\"Enter folder name\"\n              data-testid=\"new-folder-name-input\"\n              onKeyDown={(e) => e.key === 'Enter' && handleCreateFolder()}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => { setShowNewFolderDialog(false); setNewFolderName(''); }}\n                data-testid=\"cancel-new-folder\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateFolder}\n                disabled={!newFolderName.trim()}\n                data-testid=\"create-folder\"\n              >\n                Create Folder\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Repository Dialog */}\n      <Dialog open={showCreateRepoDialog} onOpenChange={setShowCreateRepoDialog}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"create-repo-dialog\">\n          <DialogHeader>\n            <DialogTitle>Create New Repository</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"repo-name\">Repository Name</Label>\n              <Input\n                id=\"repo-name\"\n                value={newRepoName}\n                onChange={(e) => setNewRepoName(e.target.value)}\n                placeholder=\"my-awesome-repo\"\n                data-testid=\"repo-name-input\"\n                onKeyDown={(e) => e.key === 'Enter' && handleCreateRepository()}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"repo-description\">Description (Optional)</Label>\n              <Textarea\n                id=\"repo-description\"\n                value={newRepoDescription}\n                onChange={(e) => setNewRepoDescription(e.target.value)}\n                placeholder=\"A short description of your repository\"\n                rows={3}\n                data-testid=\"repo-description-input\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"repo-private\"\n                checked={isRepoPrivate}\n                onCheckedChange={setIsRepoPrivate}\n                data-testid=\"repo-private-switch\"\n              />\n              <Label htmlFor=\"repo-private\" className=\"text-sm\">Private repository</Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch\n                id=\"auto-init\"\n                checked={autoInit}\n                onCheckedChange={setAutoInit}\n                data-testid=\"auto-init-switch\"\n              />\n              <Label htmlFor=\"auto-init\" className=\"text-sm\">Initialize with README</Label>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => { \n                  setShowCreateRepoDialog(false); \n                  setNewRepoName(''); \n                  setNewRepoDescription(''); \n                  setIsRepoPrivate(false);\n                  setAutoInit(true);\n                }}\n                data-testid=\"cancel-create-repo\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateRepository}\n                disabled={!newRepoName.trim()}\n                data-testid=\"create-repo\"\n              >\n                <Building className=\"h-4 w-4 mr-2\" />\n                Create Repository\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Repository Settings Dialog */}\n      <Dialog open={showSettingsDialog} onOpenChange={setShowSettingsDialog}>\n        <DialogContent className=\"sm:max-w-2xl\" data-testid=\"settings-dialog\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Settings className=\"h-5 w-5 mr-2\" />\n              Repository Settings\n            </DialogTitle>\n          </DialogHeader>\n          <Tabs defaultValue=\"pages\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-1\">\n              <TabsTrigger value=\"pages\" className=\"flex items-center\">\n                <Globe className=\"h-4 w-4 mr-2\" />\n                GitHub Pages\n              </TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"pages\" className=\"space-y-4\">\n              {selectedRepo && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-medium\">GitHub Pages</h3>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Build and deploy your site from a GitHub repository\n                      </p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm\">{pagesData ? 'Enabled' : 'Disabled'}</span>\n                      <Switch\n                        checked={!!pagesData}\n                        onCheckedChange={(enabled) => handleToggleGitHubPages(enabled)}\n                        disabled={pagesLoading}\n                        data-testid=\"pages-toggle\"\n                      />\n                    </div>\n                  </div>\n                  \n                  {pagesData && (\n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"space-y-4\">\n                          <div>\n                            <Label>Site URL</Label>\n                            <div className=\"flex items-center space-x-2 mt-1\">\n                              <Input \n                                value={pagesData.html_url || ''} \n                                readOnly \n                                className=\"bg-muted\"\n                              />\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => window.open(pagesData.html_url, '_blank')}\n                                data-testid=\"visit-site\"\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          <div>\n                            <Label>Source Branch</Label>\n                            <div className=\"mt-1\">\n                              <Select \n                                value={pagesData.source?.branch || 'main'}\n                                onValueChange={(branch) => handleToggleGitHubPages(true, branch)}\n                              >\n                                <SelectTrigger data-testid=\"branch-select\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {branches?.map((branch) => (\n                                    <SelectItem key={branch.name} value={branch.name}>\n                                      {branch.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n\n                          <div className=\"flex items-start space-x-2 p-3 bg-blue-50 dark:bg-blue-950/50 rounded-lg\">\n                            <Info className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0\" />\n                            <div className=\"text-sm\">\n                              <p className=\"font-medium text-blue-900 dark:text-blue-100\">\n                                GitHub Pages Configuration\n                              </p>\n                              <p className=\"text-blue-700 dark:text-blue-300 mt-1\">\n                                Your site is published from the <code className=\"bg-blue-200 dark:bg-blue-800 px-1 rounded\">{pagesData.source?.branch || 'main'}</code> branch.\n                                Changes to this branch will automatically trigger a new deployment.\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {!pagesData && (\n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"text-center space-y-3\">\n                          <Globe className=\"h-12 w-12 text-muted-foreground mx-auto\" />\n                          <div>\n                            <h3 className=\"font-medium\">GitHub Pages is disabled</h3>\n                            <p className=\"text-sm text-muted-foreground mt-1\">\n                              Enable GitHub Pages to publish your site directly from this repository.\n                            </p>\n                          </div>\n                          <Button \n                            onClick={() => handleToggleGitHubPages(true)}\n                            disabled={pagesLoading}\n                            data-testid=\"enable-pages\"\n                          >\n                            <Globe className=\"h-4 w-4 mr-2\" />\n                            Enable GitHub Pages\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":53462},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/markdown-viewer.tsx":{"content":"import { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Button } from '@/components/ui/button';\nimport { Download } from 'lucide-react';\n\ninterface MarkdownViewerProps {\n  content: string;\n  fileName: string;\n  onDownload?: () => void;\n}\n\nexport function MarkdownViewer({ content, fileName, onDownload }: MarkdownViewerProps) {\n  const handleDownload = () => {\n    if (onDownload) {\n      onDownload();\n    } else {\n      // Default download behavior\n      const blob = new Blob([content], { type: 'text/markdown' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }\n  };\n\n  const renderedMarkdown = useMemo(() => {\n    return (\n      <div className=\"prose prose-invert max-w-none prose-headings:text-foreground prose-p:text-foreground prose-strong:text-foreground prose-em:text-foreground prose-code:text-foreground prose-pre:bg-muted prose-pre:text-foreground prose-blockquote:text-muted-foreground prose-blockquote:border-l-border prose-a:text-primary prose-a:no-underline hover:prose-a:underline prose-li:text-foreground prose-table:text-foreground prose-th:border-border prose-td:border-border prose-hr:border-border\">\n        <ReactMarkdown remarkPlugins={[remarkGfm]}>\n          {content}\n        </ReactMarkdown>\n      </div>\n    );\n  }, [content]);\n\n  return (\n    <div className=\"flex flex-col h-full bg-background\">\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <h3 className=\"text-lg font-medium\">{fileName}</h3>\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={handleDownload} data-testid=\"download-markdown\">\n            <Download className=\"h-4 w-4 mr-1\" />\n            Download\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"flex-1 p-6 overflow-auto\">\n        <div \n          className=\"markdown-content\"\n          data-testid=\"markdown-content\"\n        >\n          {renderedMarkdown}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2271},"netlify.toml":{"content":"[build]\n  base = \"client\"\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[dev]\n  command = \"npm run dev\"\n  port = 5000\n  targetPort = 5000","size_bytes":204},"client/src/lib/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const repositorySchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  full_name: z.string(),\n  owner: z.object({\n    login: z.string(),\n    avatar_url: z.string(),\n  }),\n  private: z.boolean(),\n  html_url: z.string(),\n  description: z.string().nullable(),\n  default_branch: z.string(),\n  updated_at: z.string(),\n});\n\nexport const fileTreeItemSchema = z.object({\n  name: z.string(),\n  path: z.string(),\n  type: z.enum(['file', 'dir']),\n  size: z.number().optional(),\n  sha: z.string(),\n  url: z.string(),\n  html_url: z.string(),\n  download_url: z.string().nullable(),\n});\n\nexport const fileContentSchema = z.object({\n  name: z.string(),\n  path: z.string(),\n  sha: z.string(),\n  size: z.number(),\n  url: z.string(),\n  html_url: z.string(),\n  git_url: z.string(),\n  download_url: z.string().nullable(),\n  type: z.string(),\n  content: z.string(),\n  encoding: z.string(),\n});\n\nexport const commitSchema = z.object({\n  message: z.string().min(1, \"Commit message is required\"),\n  branch: z.string().default(\"main\"),\n});\n\nexport const gitHubUserSchema = z.object({\n  login: z.string(),\n  id: z.number(),\n  avatar_url: z.string(),\n  name: z.string().nullable(),\n  email: z.string().nullable(),\n});\n\nexport type Repository = z.infer<typeof repositorySchema>;\nexport type FileTreeItem = z.infer<typeof fileTreeItemSchema>;\nexport type FileContent = z.infer<typeof fileContentSchema>;\nexport type CommitData = z.infer<typeof commitSchema>;\nexport type GitHubUser = z.infer<typeof gitHubUserSchema>;\n\nexport interface ModifiedFile {\n  path: string;\n  content: string;\n  sha?: string;\n  status: 'modified' | 'new' | 'deleted';\n}\n\nexport interface TabItem {\n  path: string;\n  name: string;\n  content: string;\n  isModified: boolean;\n  language: string;\n  sha?: string;\n}","size_bytes":1793},"vite.replit.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\n// Get the allowed host from Replit environment\nconst allowedHost = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS;\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    allowedHosts: allowedHost ? [allowedHost] : [\"localhost\"],\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});","size_bytes":1184}},"version":1}